{
  "hash": "fcbb07fe37071c6dfd85ab22b2ea8521",
  "result": {
    "markdown": "---\ntitle: 7. Hypotheses, measurement and associations\nsubtitle: Written by Rob Davies\norder: 8\n---\n\n::: {.cell}\n\n:::\n\n\n# Preparation\n\n## Lectures\n\n- [Part 1](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2016857)\n- [Part 2](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2016858)\n- [Part 3](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2016860)\n- [Part 4](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2016863)\n- [Part 5](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2016865)\n\n- All slides are [here (html)](https://modules.lancaster.ac.uk/mod/resource/view.php?id=2016871), and [here (.docx)](data/PSYC401_wk7/401-hypotheses-associations-printable-edited.docx)\n\nI have split the lecture into 5 parts, because students told us they prefer shorter segments, I split the lecture into 5 parts: most are about 15 minutes in length; part 1 is shorter; part 4 is longer. I have labelled lecture parts so you know what is in each.\n\n## Work through the materials below for the Practical\n\n- First, you can work through the how-to: this takes you through everything you need to do, step by step, with explanation comments and examples.\n\n- Second, work through the workbook: this requires you to take what you have learned and apply it with a different but related dataset.\n\nThe motivation for providing you with a how-to and a workbook is that you can learn and progress to do the practical work with more support (in the how-to) and then room to try things (in the workbook).\n\n-- Attend the practical\n\n-- [Test yourself using the quiz](https://modules.lancaster.ac.uk/mod/quiz/view.php?id=2017296) (not assessed).\n\n-- Optionally, if you can give us your (anonymised) [feedback on how the course](https://modules.lancaster.ac.uk/mod/feedback/view.php?id=2016867) is going from your perspective, that would be very welcome.\n\n# Part One: How To\n\n\nIn Week 7, we aim to develop skills in visualizing and testing the associations between variables in psychological data\n\nWe do this to learn how to answer research questions like:\n\n- What person attributes predict success in understanding?\n- Can people accurately evaluate whether they correctly understand written \nhealth information?\n  \nThese kinds of research questions can be answered using methods like correlation and linear models\n\nWhen we do these analyses, we will need to think about how we report the results:  \n- we usually need to report the correlation, size and direction of r\n- we usually need to decide, is the correlation significant?\n\nWe will consolidate and extend learning on data visualization:\n- Use histograms to examine the distributions of variables;\n- Learn to edit the histograms\n- Use scatterplots to examine the relationships we may observe or predict\n- Learn to edit the scatterplots\n\nThe idea is that as we work, we will develop skills in producing appealing plots for professional audiences \n\n\nWe will take things step-by-step and I will be explicit about when we:\n- revise -- where you have started to do things and maybe can use some practice to strengthen skills;\n- introduce -- where you are doing things that are new;\n- extend -- where you can do things that will stretch you -- where you might go beyond your current understanding \n\n:::callout-note\n## Coding\nI will structure the code in the practical work a bit differently from what you have done until now when making plots. The reason for this change is because it will help you to keep clear what you are doing, you increase the complexity and power of the plots\n:::\n\n## Task 1: Set-up\n\n\n1. Run this code to empty the R environment: `rm(list=ls())`                         \n\n2. Load the tidyverse library: `library(tidyverse)`\n\n## Task 2: Load data\n\n-- In this how-to guide, we use data from a 2020 study of the response of adults from a UK national sample to written health information: `study-one-general-participants.csv`\n\n3. Read in the data file we will be using: \n\n::: {.cell}\n\n```{.r .cell-code}\nstudy-one-general-participants.csv\n```\n:::\n\n\n-- We use the `read_csv()` function to read the data file into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy.one <- read_csv(\"study-one-general-participants.csv\")  \n```\n:::\n\n\n4. Inspect the data file\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Hint\nUse the summary() or head() functions to take a look\n`head(study.one)`\n`summary(study.one)`\n\n-- head() will give you the top few rows of any dataset you have read into R\n-- head(...) is a function, and you put the name of the dataset inside the brackets to\nview it\nhead(study.one)\n\n-- summary() will give you either descriptive statistics for variable columns classified as numeric\nor will tell you that columns in the dataset are not numeric\n-- summary() is also a function and, again, you put the name of the dataset inside the brackets to\nview it\nsummary(study.one)\n:::\n\nQ1. What is the mean of 'mean.acc'?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\n0.8163  \n:::\nQ2. What class is the variable 'study'?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\ncharacter  \n:::\nQ3. Does the summary indicate if any variable has missing values (NAs)?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nNo  \n:::\n\n5.Change the class or type of the variable 'study' to factors\n\nYou can use the as.factor() function you have used before `study.one$study <- as.factor(study.one$study)`\n\n\nQ4. After you have done this, what information does summary() give you about the variable\n'study' using `summary(study.one)`?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nWe can see the number 169 beside the word 'studyone': this tells us that there are 169\nobservations, in the column, each one is a value: the word or character string 'studyone'.  \n:::\n\n\n## Task 3: Use histograms to examine the distributions of variables\n\n::: {.callout-important}\nrevise: consolidate what you know\n:::\n\n6. Draw histograms to examine the distributions of variables. Use ggplot() with geom_histogram()\n\nThe first time we do this, we take things step-by-step\nHere's an example: run the line of code and see the result in the Plots window in R-Studio\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc)) + geom_histogram()\n```\n:::\n\n\nThese are the steps:\n- `ggplot(...)`  you tell R you want to make a plot using the `ggplot()` function\n- `ggplot(data = study.one ...)`  you tell R you want to make a plot with the `study.one` data\n- `ggplot(..., aes(x = mean.acc))`  you tell R that you want to make a plot with the variable `mean.acc` here, you specify the aesthetic mapping, `x = mean.acc`\n- `ggplot(...) + geom_histogram()`, you tell R you want to plot values of `mean.acc` as a histogram\n\n\nQ5. Did you get a message in red in the Console window in R-Studio: what does it say?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n:::\n\nQ6.  What does 'binwidth' refer to? You need to do a search online (e.g., using Google) with the keywords: \"ggplot reference geom_histogram\"\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nIf your search gets you to this page:\nhttps://ggplot2.tidyverse.org/reference/geom_histogram.html  \n you will see first a technical definition \"The width of the bins. Can be specified as a numeric value ...\"\n and then you will see examples of the use of the term e.g. `ggplot(diamonds, aes(carat)) + geom_histogram(binwidth = 0.01)`. If you run the example code, it will produce a plot. Do it.\n:::\n\nIt is a very good idea to get get some experience doing searches online for information about working\nwith data analysisTasks.\nYou will find that there is a lot of useful information, written in different ways for people with different levels of expertise.\n\n\n Here, we are interested in working with 'binwidth' in geom_histogram(). The example gives us a hint at what we can do: we can change the appearance of the bars in the histogram. The bars in the histogram represent how often we observe, in a dataset, a grouping of similar values in a variable\n \n-- Larger (wider) bins count more different values as similar, so increasing binwidth will give you fewer wider bars in a histogram. \n\n::: callout-important\n extend: make some new moves \n:::\n\n7. Experiment with changing the binwidth. Use `geom_histogram(binwidth = ...)` like you can see in the ggplot() reference example. Note that binwidth needs to take into account the scale of the x variable. It won't work for `mean.acc` if you make binwidth = 100\n \nThe number will need to be something between 0 and 1 (the min and max for mean.acc)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc)) + geom_histogram()\nggplot(data = study.one, aes(x = mean.acc)) + geom_histogram(binwidth = 0.1)\nggplot(data = study.one, aes(x = mean.acc)) + geom_histogram(binwidth = 0.2)\nggplot(data = study.one, aes(x = mean.acc)) + geom_histogram(binwidth = 0.5)\n```\n:::\n\n\n Q7.  What happens as you change the binwidth from, say, 0.1 to 0.2?\n \n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nYou can see that with larger binwidth numbers, fewer bars are shown, and the bars are wider \nand taller: because they are including more observations\n:::\n\n\n## Task 4: Edit your plots to make them look good#\n\n::: callout-important\nextend: make some new moves \n:::\n\n8.  Edit the appearance of the plot step-by-step. \n\nggplot() code does not all have to be on the same line\n\nIf we break the plot code into steps, it will make it easier to read,\nand it will make it easier to add edits e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc)) + \n  geom_histogram()\n```\n:::\n\n\n If you run the selection of both lines, you get the code to work. Or if your text cursor (the flashing line where you type) is on either of the lines, when you run (either by clicking run, or by using CMD+Enter or Ctrl+Enter) it will run the full code section.\n\n::: {.callout-note icon=\"false\" collapse=\"true\"}\n## Why and when can we write code over multiple lines?\n\nR doesn't need to be told the code starts at the next line and will just continue to read the next line whenever it considers the statement as \"not finished\". To ensure code runs on, you need to make sure that the code doesn't \"finish\" on a single line. Compare the two below\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1 + 2 #line ends on 2\n+ 3 # and starts on plus\n\na <- 1 + 2 + #line ends on a plus\n3 #and starts on 3\n```\n:::\n\n\nSo, when spreading code over multiple lines, you have to make sure that R knows something is coming, either by leaving a bracket open, or ending the line with an operator. Operators include `+`, `-`, `*`, `/`, and you can also use opening brackets of any kind `(`, `[`, `{`, or even commas, `,` and quotation marks, `\"`, `'`. Try it out with any of your code you've written today.\n\nThe key to remember with having run-on code is that we are using it for readability purposes, don't go mad and use a new line anytime you use an operator or comma. When you write complex code, which can often be plots, then we want to make sure it is easily readable and editable. Check out some sample code below from another project, which looks easier to read and work with?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_ca_row(CAplot, select.row = data_dept_freq_names, repel = TRUE, col.row = data_dept_freq$StudyDepartment) + labs(x = \"Skill Importance (84.83%)\", y = \"Department (10.26%)\", title = \"\", colour = \"Department\") + theme_bw() + theme(text = element_text(size = 18)) + theme(legend.position = c(.92,.92))\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_ca_row(CAplot, repel = TRUE,\n            select.row = data_dept_freq_names, \n            col.row = data_dept_freq$StudyDepartment) + \n  labs(x = \"Skill Importance (84.83%)\", y = \"Department (10.26%)\", \n       title = \"\", colour = \"Department\") +\n  theme_bw() +\n  theme(text = element_text(size = 18)) +\n  theme(legend.position = c(.92,.92))\n```\n:::\n\n\n:::\n\n We are going to edit:\n-- the appearance of the bars using `binwidth`\n-- the colour of the background using `theme_bw()`\n-- the appearance of the labels using `labs()` as follows\n\n- the appearance of the bars using `binwidth`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc)) + \n  geom_histogram(binwidth = 0.2)\n```\n:::\n\n\n- the colour of the background using `theme_bw()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc)) + \n  geom_histogram(binwidth = 0.2) +\n  theme_bw()\n```\n:::\n\n\n- the appearance of the labels using `labs()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc)) + \n  geom_histogram(binwidth = 0.2) +\n  theme_bw() +\n  labs(x = \"mean accuracy\", y = \"frequency count\")\n```\n:::\n\n\n::: {callout-important}\n introduce: learn to handle errors and warnings \n:::\n\n You can break this code by not adding a + at the end of each bit (except the last line)\n Try it:\n \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.acc))\n  geom_histogram(binwidth = 0.2) +\n  theme_bw() +\n  labs(x = \"mean accuracy\", y = \"frequency\")\n```\n:::\n\n\nQ8.  You will get an error message in the console window, orange and grey, if you omit a + like in the example\n what is the error message?\n \n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nError: Cannot add ggproto objects together. Did you forget to add this object to a ggplot object?\nRun `rlang::last_error()` to see where the error occurred.  \n:::\n\nR will give you hints  often in red  in warnings or error messages about what has gone wrong. This can be a bit frightening but usually you can fix a problem by:\n \n-- trial and error  try changing things to see what happens\n-- copying the error message into an online search: usually, that will get you to a blog or discussion that is helpful  \n\nQ9.  Paste the error message into Google: click on one of the results do you see any useful information?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nAn explanation of the problem is shown e.g.    \nhttps://community.rstudio.com/t/could-anybody-help-me-cannot-add-ggproto-objects-together/11271  \n:::\n\n\n### Error messages and warning messages \n  \nError messages and warning messages can be a bit alarming at first. R gives you a warning message e.g. on binwidth if you made a choice \nbut R wants you to know other choices are possible\n R gives you an error message e.g. about adding objects to a ggplot \nobject if something in the code does not work or a choice you make in the \ncode does not work\n\n You will learn to use in the information in these messages\n They can be frustrating because, early in your skill development, \nit can be difficult to know how to fix the problem\n You can almost always fix a problem through (1.) trial and error or \n(2.) copying the message into an online search and following the advice you \nfind\n\n If you think about it, the 'you can almost always fix a problem' \nstatement is amazing\n The R community has many millions of people in it and many of us \nare doing different and complex things\n Yet the huge value of the community means that *for every problem \nyou encounter, someone else has already met that\nproblem, solved it, and posted a blog online about how to fix it*\n\n  \n  \n\n## Task 5: Now draw scatterplots to examine associations between variables\n  \n:::{callout-important}\n revision: make sure you are confident about doing these things \n:::\n  \n You have seen these code moves before, in previous classes: we are \nstrengthening skills by practising coding in different contexts\n\n\n9. Create a scatterplot to examine the association between some variables. We are working with geom_point() and you need x and y aesthetic mappings\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = mean.self, y = mean.acc)) + \n    geom_point()\n```\n:::\n\n This plot shows:\n the possible association between x-axis variable 'mean.self' and y-axis \nvariable 'mean.acc'\n\n The plot code moves through the following steps:  \n-- ggplot(...)  make a plot\n-- ggplot(data = study.one, ...)  with the 'study.one' dataset\n-- ggplot(...aes(x = mean.self, y = mean.acc))  using two aesthetic mappings:x = mean.self  map 'meann.self' values to x-axis (horizontal, left to right) positions \n-- y = mean.acc  map 'meann.acc' values to y-axis (vertical, bottom to top) positions\n-- geom_point()  show the mappings as points    \n  \n10.  Now do scatterplots with any pair of numeric variables you like. Remember what we saw with `summary()` not every variable consists of numbers  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(y = mean.self, x = mean.acc)) +\n    geom_point()  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = AGE, y = mean.self)) +\n  geom_point()  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = SHIPLEY, y = mean.self)) +\n  geom_point()  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = HLVA, y = mean.self)) +\n  geom_point()  \n```\n:::\n\n\n## Task 6: Edit the scatterplots to make them look good\n\n:::callout-important\n extend: make some new moves \n:::\n\n11. Edit the appearance of the plot step-by-step\n\n\n We are going to edit:\n-- the appearance of the points using alpha and size\n-- the colour of the background using theme_bw()\n-- the appearance of the labels using labs()\n as follows\n\n- the appearance of the points using alpha and size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = HLVA, y = mean.self)) +\n  geom_point(alpha = 0.5, size = 2) \n```\n:::\n\n\n- the colour of the background using `theme_bw()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = HLVA, y = mean.self)) +\n  geom_point(alpha = 0.5, size = 2)  +\n  theme_bw()\n```\n:::\n\n- the appearance of the labels using `labs()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = HLVA, y = mean.self)) +\n  geom_point(alpha = 0.5, size = 2)  +\n  theme_bw() +\n  labs(x = \"HLVA\", y = \"mean self rated accuracy\")\n```\n:::\n\n\n The arguments alpha and size can change the appearance of most geometric \nobjects (`geoms`) in ggplot:\n\nIn the code example, here, we vary the `alpha` number to change how opaque or \ntransparent the points are, and we vary the `size` number to vary the size of the points\n\n\n12.  Now you experiment: edit the appearance of the plot by changing alpha and size  what about colour? Check out the ggplot reference for scatterplots\n\n Q10.  Can you find the ggplot reference page? Do a search with the keywords \"ggplot reference geom_point\"\n \n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nIt is here: \nhttps://ggplot2.tidyverse.org/reference/geom_point.html\n:::\n\nQ11.  Can you change the colour of the points to a colour you like? Useful information on colour can be found here:\nhttps://r-graphics.org/recipe-colors-setting\nhttp://www.cookbook-r.com/Graphs/Colors_(ggplot2)/\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nHere is how you do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.one, aes(x = HLVA, y = mean.self)) +\n  geom_point(alpha = 0.5, size = 2, colour = \"hotpink\")  +\n  theme_bw() +\n  labs(x = \"HLVA\", y = \"mean self rated accuracy\")\n```\n:::\n\n:::\n\nNow you: experiment!\n\n## Task 7: Use correlation to to answer the research questions\n\n:::{callout-important}\n extend: make some new moves \n:::\n\n One of our research questions is:\n- Can people accurately evaluate whether they correctly understand written health information?\n\n We can answer this question by examining whether mean self-rated accuracy of understanding correlates with mean accuracy of understanding. The logic is that if we can accurately rate our own understanding (from bad to good) then that rating should be associated should be correlated with how accurately we can actually respond to questions that test that understanding\n\n13.  Examine the correlation between mean self-rated accuracy (`mean.self`) and mean accuracy (`mean.acc`). We use `cor.test()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor.test(study.one$mean.acc, study.one$mean.self, method = \"pearson\",  alternative = \"two.sided\")\n```\n:::\n\n\nQ3.  What is r, the correlation coefficient?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nr = 0.4863771\n:::\n\nQ4.  Is the correlation significant?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nr is significant\n:::\n\nQ5.  What are the values for t and p for the significance test for the correlation?\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\nt = 7.1936, p = 2.026e-11\n:::\n\nQ6.  What do you conclude, given the correlation results? Review the scatterplot you drew earlier to examine the shape of the association between these variables\n\n::: {.callout-tip icon=\"false\" collapse=\"true\"}\n## Answer\n`mean.acc` and `mean.self` are positively correlated suggesting that as `mean.acc` scores increase so also do `mean.self` scores\n:::\n\n\n# Part Two: The workbook\n\nIn Week 7, we aim to develop skills in visualizing and testing the associations between variables in psychological data\n\nWe do this to learn how to answer research questions like:\n\n1. What person attributes predict success in understanding?\n2. Can people accurately evaluate whether they correctly understand written health information?\n\nThese kinds of research questions can be answered using methods like correlation and linear models\n\nWhen we do these analyses, we will need to think about how we report the results:  \n-- we usually need to report the correlation, size and direction of r;\n-- we usually need to decide, is the correlation significant?\n\nWe will consolidate and extend learning on data visualization:\n-- Use histograms to examine the distributions of variables;\n-- Learn to edit the histograms\n-- Use scatterplots to examine the relationships we may observe or predict\n-- Learn to edit the scatterplots\n\nThe idea is that as we work, we will develop skills in producing appealing plots for professional audiences  \n\nWe will take things step-by-step\n\n\n I work through the parts,Tasks and questions with similar data in Part 1. If you are unsure how to do something, check that out and then come back here\n\n## Task 8: Set-up\n\n\n1.  Run this code to empty the R environment: `rm(list=ls())`\n\n\n2.  Run this code to load relevant libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"patchwork\")\nlibrary(\"tidyverse\")\n```\n:::\n\n\nIn this how-to guide, we use data from *a second* 2020 study of the response of adults from a UK national sample to written health information: `study-two-general-participants.csv`\n\n## Task 9: Load data\n\n\n3.  Read in the first data file we will be using: `study-two-general-participants.csv`. Use the `read_csv()` function to read the data file into R When you read the data file in, give the data object you create a clear name e.g. `study.two.gen`\n\nTask 4  Inspect the data file\n hint:Task 4  Use the summary() or head() functions to take a look\n\nQ1.  What is the median of `AGE`?\n\nQ2.  What class is the variable `ETHNICITY`?\n\nQ3.  Does the summary indicate if any variable has missing values (NAs)?\n\n\n5.  Change the class or type of the variable `ETHNICITY` to factor. You can use the `as.factor()` function you have used before\n\nQ4.  After you have done this, what information does `summary()` give you about the variable `ETHNICITY`?\n\n\n## Task 10: Use histograms to examine the distributions of variables\n\n6. Draw histograms to examine the distributions of variables. Use `ggplot()` with `geom_histogram()`\n\nThe first time we do this, we take things step-by-step.\n\nHere's an example: run the line of code and see the result in the Plots window in R-Studio\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = study.two.gen, aes(x = mean.acc)) + geom_histogram()\n```\n:::\n\n\n\nQ5.  Did you get a message in red in the Console window in R-Studio: \nwhat does it say?\n\nQ6.  Draw two different histograms to examine the distributions of two \ndifferent variables: `SHIPLEY` and `HLVA`\n\nQ7.  Now re-do both plots: can you change the binwidth in geom_histogram() to make the bars wider? If you are going to change `binwidth` the number you use needs to be a number larger than the minimum and smaller than the maximum for the variable. Remember, min and max values are given for each numeric variable in `summary()`\n\nQ8  How would you describe the distributions in a sentence of the distributions of the `SHIPLEY` and `HLVA` variable values for our sample?\n\n\n## Task 11: Edit your plots to make them look good\n\n8.  Edit the appearance of a histogram plot for *one numeric variable*. `ggplot()` code does not all have to be on the same line, you can create a new plot for each edit so you can see what difference your edits make.\n\nQ9.  Edit the appearance of the bars using `binwidth`\n\nQ10.  Edit the colour of the background using `theme_bw()`\n\nQ11.  Edit the appearance of the labels using `labs()`\n\nQ12.  Edit the appearance of the bars by changing the fill in `aes()`. To figure out how to do this, you will need to first look at \nthe ggplot reference information online  do a search with the keywords \"ggplot reference geom_histogram\" and then come back to this. The example code in the reference information is always a good place to find ideas you can use. You can ask for fill to be a specific colour e.g. \"red\" (use quotes)\n\n## Task 12: Now draw scatterplots to examine associations between variables\n\n9. Create a scatterplot to examine the association between some variables e.g. `HLVA` and `mean.acc`. We are working with `geom_point()` and you need x and y aesthetic mappings\n\n10.  Now do scatterplots with *every* numeric predictor variable in the `study.two.gen` dataset. You always want to use as the y-axis variable the outcome `mean.acc` so: `y = mean.acc`. Then you can use each numeric predictor variable as the x-axis variable e.g. `x = mean.self`. Remember what we saw with `summary()`: not every variable consists of numbers. If the `summary()` does not show you a mean for a variable, R does not think that variable is numeric. It can be hard to decide what an association looks like.\n\nQ13.  What is the shape (direction) of the association between `mean.self` and `mean.acc`?\n\nQ14.  What is the shape (direction) of the association between `AGE` and `mean.acc`?\n\nQ15.  What is the shape (direction) of the association between `SHIPLEY` and `mean.acc`?\n\nQ16.  What is the shape (direction) of the association between `HLVA` and `mean.acc`?\n\nQ17.  What is the shape (direction) of the association between `FACTOR3` and `mean.acc`?\n\nQ18.  What is the shape (direction) of the association between `QRITOTAL` and `mean.acc`?\n\n## Task 13: Edit the scatterplots to make them look good\n\n11.  Edit the appearance of one plot step-by-step\n\n We are going to edit:\n-- the appearance of the points using `alpha`, `size` and `colour`\n-- the colour of the background using `theme_bw()`\n-- the appearance of the labels using `labs()` as follows\n\n\nQ19.  Change the appearance of the points using alpha, size and colour. Just like with `geom_histogram()` there is ggplot reference information for the geom you need here. Find some example code and come back here if you are unsure what to do\n\nQ20.  Edit the colour of the background using `theme_bw()`\n\nQ21.  Edit the appearance of the labels using `labs()`\n\nQ22.  Can you find the ggplot reference page? Do a search with the keywords \"ggplot reference geom_point\"\n\n Now you: experiment!\n\n\n## Task 14: Use correlation to to answer the research questions\n\n13.  Examine the correlation between mean accuracy (mean.acc) and some numeric predictor variables. We use `cor.test()`\n\nQ23.  What is r (given as `cor` in the output) for the correlation between `HLVA` and `mean.acc`?\n\nQ24.  Is the correlation significant?\n\nQ25.  What are the values for t and p for the significance test for the correlation?\n\nQ26.  What do you conclude, given the correlation results? Maybe draw a scatterplot to examine the shape of the association\n\nQ27.  What is r (given as `cor` in the output) for the correlation between `mean.self` and `mean.acc`?\n\nQ28.  Is the correlation between `AGE` and `mean.acc` significant?\n\nQ29.  What are the values for t and p for the significance test for the correlation between `QRITOTAL` and `mean.acc`?\n\nQ30.  What do you conclude, given the correlation results, about the association between `SHIPLEY` and `mean.acc`?\n\n## Task 15: Optional extensions\n\n14.  One of the convenient and powerful things about R plotting code is that you can create a series of plots and put them together in a grid of plots for east comparison: we do that here. We will use the patchwork library: check it out [https://patchwork.data-imaginist.com/articles/patchwork.html](https://patchwork.data-imaginist.com/articles/patchwork.html)\n\n:::{.callout-warning collapse=\"true\"}\n## Here`s an example  \n\n first create two plots: give them both names\np.AGE <- ggplot(data = study.two.gen, aes(x = AGE, y = mean.acc)) +\n  geom_point() \n\np.SHIPLEY <- ggplot(data = study.two.gen, aes(x = SHIPLEY, y = mean.acc)) +\n  geom_point()  \n\n second put them together\np.AGE  + p.SHIPLEY\n:::\n\nNow you try it: create two plots, using `QRITOTAL` and `SHIPLEY` as predictors and `mean.acc` as the outcome, then make a grid to present them side by side\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}