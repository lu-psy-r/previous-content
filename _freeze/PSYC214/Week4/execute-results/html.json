{
  "hash": "b00fa769639511ff88743b2086038e64",
  "result": {
    "markdown": "---\ntitle: 4. One-Factor Within-Participants ANOVA\nsubtitle: \"Richard Philpot, Mark Hurlstone\"\norder: 5\n---\n\n\n# Lecture\n\nWatch Part 1 [here](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2006236)\n\nWatch Part 2 [here](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2006237)\n\nWatch Part 3 [here](https://modules.lancaster.ac.uk/mod/panopto/view.php?id=2006241)\n\nDownload the lecture slides [here](data/Wk4/Lecture 4 - student slides [small].pdf), and [here](data/Wk4/Lecture 4 - student slides [large].pdf) for a larger version.\n\n# Lab\n\nWelcome back to Lab 4 of Year 2 Stats! \n\nWe are now in our 4th engagement of the new academic year with our good friend, R. As with preceding weeks, we will be working from an activity sheet, which outlines a number of decent tasks to complete in R Studio. The objectives of today's lab are three fold:\n\n1. Running tests of the assumptions of the within-participants ANOVA.\n2. Running and reporting a within-participants ANOVA and follow up tests.\n3. Debugging code which is misbehaving.\n\nAs always, myself (Richard Philpot, weeks 1-4), Mark Hurlstone (weeks 5-9) and an apt team of GTAs will be circulating through the room and answering any queries you may have. In Psyc214, we also encourage peer engagement and joined problem solving - so please do not hesitate to ask for help from another on your table or to work together in small groups. Right, that enough for now, so let's get started!ðŸ’ª\n  \n******\n### 1 - General Introduction to Lab 4\n\\\n| *\"I never dreamed about success, I worked for it\"* | Estee Lauder.\n\n![Estee Lauder (left)](https://raw.githubusercontent.com/richardphilpot/LU_Stats_Y2-/main/Estee_Lauder_NYWTS.jpg)\n  \n******\n#### 1.1 Access to R Studio\n\nHere we are, ready to log back into the R Studio Server again.\n\n---\ntitle: \"Statistics for Psychologists\"\npage-layout: article\n---\n\nTo log in to the R server, first make sure that you have the VPN switched on, or you will need to be connected to the university network (Eduroam). To set up the VPN, follow ISS' [instructions here](https://portal.lancaster.ac.uk/ask/digital/services/university-it-network/vpn/) or connecting to Eduroam [here](https://portal.lancaster.ac.uk/ask/digital/services/university-it-network/wi-fi/).\n\nWhen you are connected, navigate to [https://psy-rstudio.lancaster.ac.uk](https://psy-rstudio.lancaster.ac.uk), where you will be shown a login screen that looks like the below. Click the option that says \"Sign in with SAML\".\n\n![](/Includes/1LoginSAML.png) <!-- says no image but it's all about the include setup -->\n\nThis will take you through to the University login screen, where you should enter your username (e.g. ivorym) and then your university password. This will then redirect you to the R server where you can start using RStudio!\n\n![](/Includes/2LoginUser.png)\n\n![](/Includes/3LoginPass.png)\n\n::: {.callout-note}\nIf you have already logged in through the university login already, perhaps to get to the portal, then you may not see the username/password screen. When you click login, you will be redirected straight to RStudio. This is because the server shares the login information securely across the university.\n:::\n\n\n\n******\n#### 1.2 Creating a new folder, project and script - loading the data set and dependencies\n\nWe have again been whisked away up into the clouds of our R Studio server. \n\nThe first task is to access the dataset for today's session from Moodle.\n\n1. Step 1. Please ensure that you **download today's data** from the psyc214 week 4 'lab' folder in Moodle. Please download the *week4_meat_consumption.csv* file from [here](data/Wk4/week4_meat_consumption.csv)\n\n2. Now that you have the data saved on your machine, it would be good practice to make a dedicated space on our own individual R Studio servers in which to house today's data, project and script. \n\nTo do this, we first need to **create a new folder**. On the server, please navigate to the bottom right panel (see figure below). Click on 'Home' to ensure you are not working from last week's folder. Here, under the 'files' you will see the option to add 'New Folder'. Click on this and name the new folder *psyc214_lab_4* Note. Please ensure this is spelled correctly.\n\n\n3. Now that you have a folder in waiting, it's time to add week 3's data file. To *upload today's data** - the *week4_meat_consumption.csv* file - please open your new *psyc214_lab_4* folder. When in the new folder, select the 'Upload' tab (see figure below). This will present a box that will ask where the data is that you want to upload. Click on \"Browse...\", find where you have the *week4_meat_consumption.csv* data file on your computer and click 'OK'\n\nPerfect! The data is now sat patiently in the right place.\n\n4. We'll want to be able to **create a project** session on our server: to do so please:\nclick 'File' on the top ribbon --> New project.\nNext, select existing directory and name the working directory ~/psyc214_lab_4 --> hit 'create project'. A new workspace will now open up.\n\n5. The next thing to do is to **create a script**. While it is possible to work directly from the console (bottom left area of R Studio), scripts offer greater flexibility both for editing your lines of code and for saving the commands which you may want to rerun/share in the future. To create a script, please click 'File' --> 'New file' --> 'Create new R script' (please see image below)**\n\n\nThis will now create a blank text space in the top left hand of the screen where you can write and run your commands. You can save the text you write by clicking 'File' --> 'Save as'. The script file will then be safely stored in your psyc214_lab_4 folder.\n\n6. The last bit of house keeping before we start our analysis is to **load the packages** (i.e., the dependencies) we'll use for this session.\n\nPlease copy or type the following commands into R Studio to get these packages activated:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstatix) # allows group_by()\nlibrary(tidyverse) # allows pipes, arrange(), summary(), aov(), etc\nlibrary(ggpubr) # allows us to examine QQ Plots\nlibrary(Rmisc) # allows shorthand calculations of standard errors and confidence intervals\nlibrary(furniture) # helps create composite variables of averages\n```\n:::\n\nMore on these packages later.\n\nOk - Time to load this week's data and to push on with today's work.\n\n  7. First we need to **set the working directory** to 'psyc214_lab_4', i.e., tell R Studio the location in which today's data patiently sits. To recap, the working directory is the default location or folder on your computer or server by which R will read/save any files. \n  \n  The working directory can be set with the following R code:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n  setwd(\"~/psyc214_lab_4\")\n```\n:::\n\n\n  5. Now the have the directory set up, let's type the command to have R Studio **read the stored data**.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n lab4_data <- read_csv(\"week4_meat_consumption.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n  \n  where 'lab4_data' is the name we've assigned that R will recognise when it calls up our data, 'read_csv' is the R tidyverse command to pull up the data and \"week4_meat_consumption.csv\" is the name of the data file stored on the server. \n\n\n------ \n## 2 - Today's lab activities \n\nWith all of our house keeping in order, it is time to have a play.\n\n\n### 2.1 Some background information about the dataset\n\nIn recent weeks, we have been preoccupied with the Psyc214 robots and their impact on Psyc214 student learning. This week we will be moving away from our metallic friends and will examine the topic of meat consumption in Psyc214 students.\n\nThe basic premise of today's work was introduced in Lecture 4. Here, a researcher was interested in whether a person's typical meat consumption would alter after watching the documentary 'Cowspiracy: The Sustainability Secret'. This documentary, for those unfamiliar, investigates environmental impact of animal agriculture.\\\n\nThe researcher's broad research hypothesis was that meat consumption would decrease after watching the documentary. The researcher was also interested in whether this decrease in meat consumption would sustain over time.\n\n![Introducing the meat consumption study](https://raw.githubusercontent.com/richardphilpot/LU_Stats_Y2-/main/lab4_meat.png)\n\nTo examine this, a psychology researcher decided to commandeer a seminar comprising of 50 students. The researcher played the Cowspiracy documentary and adminstered a set of comprehension questions to ensure that all students had been alert and paid attention - they all had, of course. Prior to this 'treatment', the researcher asked the student participants to record the number of burgers and sausages they consumed in the week preceding the lecture.\\\n\nA week later the same students returned for their next seminar. The researcher again asked the participants to record the number of burgers and sausages they had eaten over the last week.\\\n\nFinally, the researcher wanted to examine the prolonged effect (if any) of the documentary on meat consumption. To this end, the researcher hijacked yet another seminar, 3 weeks later (4 after the original documentary showcasing), and asked participants to record the number of burgers and sausages they consumed in prior the week. As such, the research design represents a one-factor within-participants design with three levels (pre documentary, one week post documentary, four weeks post documentary).\n\nThe researcher had the following experimental hypotheses:\n\n- Participants would eat significantly less meat products in the week after watching Cowspiracy than the week prior to watching Cowspiracy  **(Hypothesis 1)**\\\n\n- Participants meat consumption would be significantly higher in the four weeks after watching Cowspiracy than the week after watching Cowspiracy **(Hypothesis 2)**\\\n\n- TAKE A MOMENT TO PAUSE AND THINK ABOUT WHAT A FURTHER H3 HYPOTHESIS COULD BE? DISCUSS WITH YOUR INNER SELF OR A CLASSMATE.\n\n![A pensive looking student!](https://images.pexels.com/photos/6237990/pexels-photo-6237990.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\n\n******\n### 2.2 Familiarizing ourselves with the data:\n\nOk, now the hypothesis generation is over, let's take a look at our data.\n\nPlease call up the data using the head() function, and ask for the top 50 data points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  head(lab4 data, n = x)\n```\n:::\n\n\nStraight away, we can see there is a bug in our code. *hint, it's something with the data name and number of data points being called.*\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nhead(lab4_data, n = 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 Ã— 5\n   participant a1_meat a2_meat a3_burgers a3_sausages\n         <dbl>   <dbl>   <dbl>      <dbl>       <dbl>\n 1           1       6       3          3           3\n 2           2       3       4          4           2\n 3           3       8       1          1           2\n 4           4       6       5          3           2\n 5           5       9       0          0           0\n 6           6       8       1          2           4\n 7           7       9       2          1           1\n 8           8       5       4          2           5\n 9           9       7       4          1           0\n10          10       8       6          2           1\n# â€¦ with 40 more rows\n```\n:::\n:::\n\n\nIf all has gone well, you should get the following:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 Ã— 5\n   participant a1_meat a2_meat a3_burgers a3_sausages\n         <dbl>   <dbl>   <dbl>      <dbl>       <dbl>\n 1           1       6       3          3           3\n 2           2       3       4          4           2\n 3           3       8       1          1           2\n 4           4       6       5          3           2\n 5           5       9       0          0           0\n 6           6       8       1          2           4\n 7           7       9       2          1           1\n 8           8       5       4          2           5\n 9           9       7       4          1           0\n10          10       8       6          2           1\n# â€¦ with 40 more rows\n```\n:::\n:::\n\n:::\n\nWe can see all data for our 50 participants. the columns show us the:\n- *participant ID*\n- the *a1_meat* value, which is the total number of burgers and sausages consumed in the week prior to the watching the documentary\n- the *a2_meat* value, which is the total number of burgers and sausages consumed in the week succeeding having watched the documentary\n- the *a3_burgers* value, which is the total number of burgers consumed in a week one month after watching the documentary\n- the *a3_sausages* value, which is the total number of sausages consumed in a week one month after watching the documentary.\n\nHave a look over this dataframe and describe the data to your inner self or a classmate.\n\n**The particularly eagle-eyed individuals among us will see that we appear to have a mistake in our data! While we have burger and sausage consumption together as a single total value for time a1 and a2, we failed to create the equivalent composite variable for time a3. Yep, definitely  a mistake - a3 burger and a3 sausages have yet to be summed together to get a total.**\\\n\nWell, it's up to us to sort this out. To do this, let's make this new variable using the mutate() function. Using this function, we can add up the total number of burgers and sausages consumed at time A3 and create a new 'a3_meat' total variable.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlab4_data %>% \n  mutate(a3_meat = (a3_burgers + a3_sausages)) -> lab4_data #create a new composite variable 'a3_meat' and add this as a column to the pre-existing lab4_data\n```\n:::\n\n\nOK. We should now have a new variable in our dataset called 'a3_meat'. Let's check and see if this has all worked. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlab4_data %>% head(n=50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 Ã— 6\n   participant a1_meat a2_meat a3_burgers a3_sausages a3_meat\n         <dbl>   <dbl>   <dbl>      <dbl>       <dbl>   <dbl>\n 1           1       6       3          3           3       6\n 2           2       3       4          4           2       6\n 3           3       8       1          1           2       3\n 4           4       6       5          3           2       5\n 5           5       9       0          0           0       0\n 6           6       8       1          2           4       6\n 7           7       9       2          1           1       2\n 8           8       5       4          2           5       7\n 9           9       7       4          1           0       1\n10          10       8       6          2           1       3\n# â€¦ with 40 more rows\n```\n:::\n:::\n\n\nWe can see that it has worked, but the surplus a3_burger and a3_sausage columns remain. Just to keep it all tidy, let's remove these redundant columns with the select() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlab4_data %>% select(-c(a3_burgers, a3_sausages)) -> lab4_data # remove 'a3_burgers' and 'a3_sausages' columns\n```\n:::\n\n\nNow let's check again using the head() function and see if we're happy. Please ask again for the first 50 rows.\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nlab4_data %>% head(n=50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 Ã— 4\n   participant a1_meat a2_meat a3_meat\n         <dbl>   <dbl>   <dbl>   <dbl>\n 1           1       6       3       6\n 2           2       3       4       6\n 3           3       8       1       3\n 4           4       6       5       5\n 5           5       9       0       0\n 6           6       8       1       6\n 7           7       9       2       2\n 8           8       5       4       7\n 9           9       7       4       1\n10          10       8       6       3\n# â€¦ with 40 more rows\n```\n:::\n:::\n\n\nHopefully you can check your dataframe and see the following...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 Ã— 4\n   participant a1_meat a2_meat a3_meat\n         <dbl>   <dbl>   <dbl>   <dbl>\n 1           1       6       3       6\n 2           2       3       4       6\n 3           3       8       1       3\n 4           4       6       5       5\n 5           5       9       0       0\n 6           6       8       1       6\n 7           7       9       2       2\n 8           8       5       4       7\n 9           9       7       4       1\n10          10       8       6       3\n# â€¦ with 40 more rows\n```\n:::\n:::\n\n:::\n\n**phew! that worked a treat!**\n\n**Special note, the above code will make a new variable by adding together two existing ones - great. However, often we will want to make a new variable by taking the average of multiple rows of data (e.g., adding multiple scores together and then dividing by the number of rows). To do that, you could, for example, replace (a3_burgers + a3_sausages) in the mutate() function with ((a3_burgers + a3_sausages)/2) - where 2 is the number of rows. Alternatively you could incorporate the rowmeans() function from the 'furniture' package, e.g., rowmeans(a3_burgers, a3_sausages). The rest of the code for the argument would stay the same. You don't need to do this now, as this will mess with what we do for the rest of the session!!!! It is just to inform you for future work.**\n\n******\n### 2.3 Reformatting the data:\n\n  ![Hold Up!](https://images.unsplash.com/photo-1542707309-4f9de5fd1d9c?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=987&q=80)\n\n**Hang on a sec folks. The data are currently presented with our repeated measures (A1_meat, A2_meat, A3_meat) formatted on the columns level. To run within-participant ANOVAs in R Studio, however, it is preferable that data are presented in a long format. Essentially, what this means is that all meat consumption scores should belong to a single long column. The grouping variable time (a1_meat, a2_meat, a3_meat) is then housed in its own single column.**\n\nTo convert the data from seperate columns for each level to one long column, please execute the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlab4_data_long <- lab4_data %>%\n  gather(key = \"time\", value = \"meat\", a1_meat, a2_meat, a3_meat)\n```\n:::\n\n\nYou will note, using the <- defining function, we have created a brand new data frame named **lab4_data_long**\\\n\nLet's view this new **lab4_data_long** dataframe and make sure it looks as we would expect. Here, we can again use the head() function - remember, however, that our number of rows have now increased 150 (all data in one column). Alternatively, you could also use the view(lab4_data_long) function.\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nlab4_data_long %>% head(n=150)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 Ã— 3\n   participant time     meat\n         <dbl> <chr>   <dbl>\n 1           1 a1_meat     6\n 2           2 a1_meat     3\n 3           3 a1_meat     8\n 4           4 a1_meat     6\n 5           5 a1_meat     9\n 6           6 a1_meat     8\n 7           7 a1_meat     9\n 8           8 a1_meat     5\n 9           9 a1_meat     7\n10          10 a1_meat     8\n# â€¦ with 140 more rows\n```\n:::\n:::\n\n\nWe can now see that our data are arranged in long format - huzzah.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 Ã— 3\n   participant time     meat\n         <dbl> <chr>   <dbl>\n 1           1 a1_meat     6\n 2           2 a1_meat     3\n 3           3 a1_meat     8\n 4           4 a1_meat     6\n 5           5 a1_meat     9\n 6           6 a1_meat     8\n 7           7 a1_meat     9\n 8           8 a1_meat     5\n 9           9 a1_meat     7\n10          10 a1_meat     8\n# â€¦ with 140 more rows\n```\n:::\n:::\n\n:::\n\nWe now have three columns. 'participant' ID (as before), but also 'time' - which holds our A1, A2 and A3 levels - and 'meat' - which is the total number of burgers/sausages consumed for that time point.\\\n\nFrom now on, we will be working with our newly created **lab4_data_long** data frame. Let's go ahead and look at the descriptive statistics for our data. As with previous weeks, we will use the rstatix() package to get some neat and tidy summary statistics. \n\nWe first specify the dataset we will use - which is **lab4_data_long**. After this we will use a pipe to ask R Studio to pass this data set on to the next function. Here, we use the group_by() function to specify that we want to distinguish between our three different levels - the variable we named 'time'. We then use another pipe to pass the intermediate result onto the next function - the get_summary_stats(). In the parentheses we include our single 'meat' dependent variable. Finally we are asked to specify what 'type' of summary statistic we would like. Let's go for mean, standard deviation, min and max values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDescriptives = lab4_data_long %\n  group_by(Time) %>%\n  get_summary_stats(meat, show = c(\"mean\", \"sd\", \"min\", \"max\"))\noptions(digits = 4)\nprint.data.frame(Descriptives)\n```\n:::\n\n\nOh blast. There seems to be some bugs in the code. Please go through and try to fix them. Hint, there are two errors in the code.\nWhen fixed, you will get the following:\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nDescriptives = lab4_data_long %>%\n  group_by(time) %>%\n  get_summary_stats(meat, show = c(\"mean\", \"sd\", \"min\", \"max\"))\noptions(digits = 4)\nprint.data.frame(Descriptives)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     time variable  n mean    sd min max\n1 a1_meat     meat 50 6.16 2.024   2  10\n2 a2_meat     meat 50 2.80 1.414   0   6\n3 a3_meat     meat 50 4.56 1.886   0   8\n```\n:::\n:::\n\n\n:::\n\nThere do seem to be some tendencies and trends in data. Speak with a classmate or your inner self about what these data indicate.\n\n******\n## 3 Assumptions of a within-participants ANOVA:\n\nBefore we progress on and see if there are differences in meat consumption between the different time levels, we first need to check our assumptions of the within-participants ANOVA. This is to ensure that we are not violating expectations of data, which may misconstrue our conclusions.\n\nAs you will recall from Lecture 4, there are 3 key assumptions of a within-participants ANOVA.\\\n1) The assumption of independence (i.e., are our participants independent from one another? - let's say 'yes!')\\\n2) The assumption of normality (i.e., are our levels [a.k.a time groups] showing normal distributions with their data points?)\\\n3) The assumption of sphericity (i.e., is the variance in data points similar across levels?)\\\n\nThe first one - assumption of independence - we need to search our souls and ask if this is the case. Let's say \"yes, yes it was\".\n\nThe other two - assumption of normality and sphericity - we can test by analytical means. We should also check if are there any extreme values in our data - remember Lecture 3.\n\nLet's give it a go!\n\n******\n### 3.1 Outliers and extreme values\n\nWe can eye ball boxplots to look for suspicious data points, or we can test for extreme values very easily using the rstatix() package. It has this wonderful function called identify_outliers(), which will tell us if we have any outliers or extreme values. As a rule, outliers are typically fine to work with, extremes however are when things become a bit hairy.\n\nPlease copy the following code:\n\n::: {.cell}\n\n```{.r .cell-code}\nlab4_data_long %>% \n  group_by(time) %>%\n  identify_outliers(meat)# the function to identify outliers and extreme values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] time        participant meat        is.outlier  is.extreme \n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\nThis is marvellous. We find zero outliers or extreme data points.\n\n******\n### 3.2 Assumption of normality\n\nLike last week, we can test whether our data are normal using QQ plots and a Shapiro-Wilk test of normality. The QQ plot maps out the correlation between our data and a normal distribution. If many data points fall away from our reference line and outside the band of the 95% confidence interval we can assume that data are non-normal.\\ \n\nThe Shapiro-Wilk test statistically calculates whether our data are 'normal'. If the p-value for our Shapiro-Wilk statistic is equal to or less than *p* = .05, then this indicates we have failed the test and have non-normal data - not good! The Shapiro-Wilk test, however, becomes less useful as we have a larger N. The larger the sample, the more likely it is that you will get a statistically significant Shapiro-Wilk test result and our data will be assumed to be non-normal.\\\n\nLet's start off by examining the QQ plot. Please enter or type the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggqqplot(lab4_data_long, \"meat\", facet.by = \"time\") # where we use \"\" around our variable names\n```\n\n::: {.cell-output-display}\n![](Week4_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nDiscuss with yourself of a colleague whether the data appear normal.\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\nMy two cents: Data look largely normal. For the A1 (pre) and A3 (after 1 month) levels the data fit nicely within the 95% confidence intervals. Level A2 (after 1 week) looks a little dicier, with some data points falling outside the 95% confidence intervals.\n:::\n\nLet's run a Shapiro-Wilk test and see what it also tells us.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlab4_data %>%\n  group_by(time) %>%\n  shapiro_test(meat)\n```\n:::\n\n\nUh oh. There is a bug here. Let's try figuring out the problem. The red error message is telling us that there is no 'time' variable, but it is spelled correctly. The problem must be somewhere else. Can you figure it out? Hint, it is only one problem.\\\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\nIf run correctly, you should receive the following output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nlab4_data_long %>%\n  group_by(time) %>%\n  shapiro_test(meat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 4\n  time    variable statistic      p\n  <chr>   <chr>        <dbl>  <dbl>\n1 a1_meat meat         0.967 0.167 \n2 a2_meat meat         0.940 0.0139\n3 a3_meat meat         0.963 0.116 \n```\n:::\n:::\n\n:::\n\nHave a think what the test is telling us before you scroll down for the answer. Remember, we are hoping that our values are non-signficant!\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\nThe Shapiro-Wilk test indicates that while data for levels A1 and A3 are normally distributed, the A2 level is not. Given that ANOVAs are pretty robust to violations of normality (Roberts & Russo, 1999), that we have 150 data points, and that the A2 Shapiro-Wilk test is not highly statistical ((*p* > .01), I think we are safe to run the ANOVA without transformations.\\\n:::\n\nIn an official report or publication, a researcher should be transparent and inform the reader when the checks of normality fail. The researcher should also justify (with relevant literature) occasions in which they decide to continue on and run an ANOVA when data violations are present.\n\n******\n### 3.3 Assumption of sphericity.\n\nThere is no need to run a separate statistical test to check sphericity (equal variance across levels). This is because R Studio will automatically check for violations of sphericity with a Mauchlyâ€™s test when computing the within-participants ANOVA itself. If data violate the assumption of sphericity - and trust me, within-participant designs *frequently* violate this assumption of ANOVA - the analysis function will automatically apply a Greenhouse-Geisser sphericity correction to handle this issue. Specifically, in cases of sphericity violations, the ANOVA table will correct the degrees of freedom and automatically include an adjusted 'eta2[g]' - or a 'generalized effect size with Greenhouse-Geisser sphericity correction'.\n\n\n******\n## 4 Running a one-factor within-participants ANOVA\n\nTo compute our one factor within participants ANOVA, let's use the *rstatix* package anova_test() function.\n\nPlease enter the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lab4_data_long %>% #Run an ANOVA with our long data\n    anova_test(dv = meat, wid = participant, within = time) # specify the dv, which rows belong to which participant and that time is the between-participant factor\nget_anova_table(model) # pull up this model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nANOVA Table (type III tests)\n\n  Effect  DFn  DFd     F        p p<.05   ges\n1   time 1.75 85.7 47.47 1.54e-13     * 0.374\n```\n:::\n:::\n\n\n\nThis provides us with a tonne of information. The 'F' value is our F statistic. 'DFn' and 'DFd' show the degres of freedom for the numerator and denominator of our F ratio formula (remember Lecture 4?). The 'p' shows us the p-value for our F statistic, while the 'ges' is our effect size with the the Greenhouse-Geisser sphericity correction - yep, we did fail the assumption of sphericity - not to worry.\n\nHave a think about what the ANOVA output is telling us.\n\n******\n### 4.1 Reporting the results of the one-factor within-participants ANOVA in APA format\n\nAs always, it is important that we are able to write up our results for others. The following is an example of how we could do so.\n\nMeat consumption was analysed using a one factor within-participants ANOVA, comprising three time levels (pre-documentary, one-week after the documentary, and one month after the documentary). A Mauchlyâ€™s test indicated that the assumption of sphericity had been violated - the degrees of freedom were therefore corrected using Greenhouse-Geisser estimates of sphericity. The meat consumption of participants statistically differed between the different time points  *F*(1.75, 85.7) = 47.47, *p* < 0.001, Î·p2 = 0.37.\n\n\n******\n### 4.2 Running further pairwise comparisons\n\nAs you will recall, the ANOVA tells us that we have differences between our groups, but not specifically which groups differ. For our between-participants robot ANOVA, we discussed the possibility of running pairwise comparisons and/or posthoc tests.\\\n\nAs we are running a **within-participants** ANOVA - and many of the posthoc tests assume that data are from independent groups (i.e., not repeated measures) - we would be better off in the current situation running multiple pairwise t-tests with Bonferroni corrections (see Lecture 3 again if this is hard to follow).\n\nTo run our pairwise comparisons, please type or paste the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairwise_comparisons <- lab4_data_long %>% # name object pairwise_comparisons \n  pairwise_t_test(\n    meat ~ time, paired = TRUE, var.equal = TRUE, # indicate this is paired (within participants) data\n    p.adjust.method = \"bonferroni\" #adjust for bonferroni correction\n    )\n(pairwise_comparisons) # show the output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 10\n  .y.   group1  group2     n1    n2 statistic    df        p    p.adj p.adj.siâ€¦Â¹\n* <chr> <chr>   <chr>   <int> <int>     <dbl> <dbl>    <dbl>    <dbl> <chr>     \n1 meat  a1_meat a2_meat    50    50     10.4     49 5.31e-14 1.59e-13 ****      \n2 meat  a1_meat a3_meat    50    50      3.96    49 2.43e- 4 7.29e- 4 ***       \n3 meat  a2_meat a3_meat    50    50     -5.89    49 3.52e- 7 1.06e- 6 ****      \n# â€¦ with abbreviated variable name Â¹â€‹p.adj.signif\n```\n:::\n:::\n\n\nSTOP. Please have a look at the different combination of levels:\n- a1_meat and a2_meat\n- a1_meat and a3_meat\n- a2_meat and a3_meat\n\nDo they statistically differ from one another? What do the data tell us?\n\n\nWe need to write this up also!\n\n******\n### 4.3 Reporting the results of the one-factor within-participants ANOVA in APA format\n\nMeat consumption was analysed using a one factor within-participants ANOVA, comprising three time levels (pre-documentary, one-week after the documentary, and one month after the documentary). A Mauchlyâ€™s test indicated that the assumption of sphericity had been violated - the degrees of freedom were corrected accordingly using Greenhouse-Geisser estimates of sphericity. The meat consumption of participants statistically differed between the different time points  *F*(1.75, 85.7) = 47.47, *p* < 0.001, Î·p2 = 0.37. Paired pairwise comparisons with Bonferroni corrections found that meat consumption varied between all three time levels (*adjusted p* < .001 for all three possible combinations). Participants consumed the highest amount of meat prior to watching the documentary (see figure 1). Participants consumed the lowest amount of meat in the one week following the documentary. Participants, on average, consumed significantly less meat a month after watching the documentary than they did before watching the documentary. Participants, however, ate significantly more meat one month after watching the documentary than they did in the week after the documentary.\n\n*Note, the results section was already getting quite wordy and so no mean values of the different levels were included. Instead, the reader was directed to figure 1 - let's make that now.*\n\n******\n### 4.4 APA barchart\n\nHere, we are going to borrow some code from our week 2 lab. We will adapt it for current purposes.\n\nLike in week 2, let's start off by creating a new dataset with standard errors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeat_plot <- summarySE(lab4_data_long, measurevar=\"meat\", groupvars=c(\"time\")) #create data with standard errors which we can apply for our barchart\n```\n:::\n\n\nOk, great. Now let's adapt our APA barchart code from week two to make a new figure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeat_plot %>% #our dataset\n    ggplot(aes(x= time, # our X axis\n               y = meat, # our Y axis\n               fill = time)) + # How we will colour our seperate bars\n    geom_col(width = .7, position = position_dodge(.3)) + # width of columns and space between columns\n    scale_fill_manual(values = c(\"#D4D4D4\", \"#737373\", \"#323232\")) + # APA colours for bars\n    scale_y_continuous(expand = expansion(0), # trick to remove space below 0 on y axis\n                       limits = c(0, 7),\n                       breaks = seq(0, 7, 1)) + # set limit of Y axis to 7\n  xlab(\"Time since watching documentary\") + #rename the x axis label\n  ylab(\"Average number of burgers and sausages consumed over a week\") + #rename the y axis label\n  scale_x_discrete(labels = c('one week prior','one week after','one month after')) + #rename the groups on x axis\n    theme(panel.background = element_blank(), # removing the background panel colour\n          axis.line = element_line(color = \"black\"), # creating black axes lines\n          axis.ticks.x = element_blank(),\n          legend.position = \"none\") + # removing the legend, which is redundant\n    geom_errorbar(aes(ymin=meat-se, ymax=meat+se, width = 0.2))\n```\n\n::: {.cell-output-display}\n![](Week4_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nThat is all looking hunky dorie. We now have a figure that we can add to our results section, to provide a visual aid regarding the average scores and error bars for our three levels. \n\nIf you've finished this and are happy, please go on to '5 Further tasks'.\n  \n******\n## 5 Further tasks\n\nWell done for completing yet another new test! There are not a lot of additional tasks this week. Some things you may wish to try though... \n\n1. The bar chart looks good, but the labels of the axes could, potentially, be improved. Rename the x-axis, y-axis and group labels to alternative names that still make sense given the study context.\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nmeat_plot %>% #our dataset\n    ggplot(aes(x= time, # our X axis\n               y = meat, # our Y axis\n               fill = time)) + # How we will colour our seperate bars\n    geom_col(width = .7, position = position_dodge(.3)) + # width of columns and space between columns\n    scale_fill_manual(values = c(\"#D4D4D4\", \"#737373\", \"#323232\")) + # APA colours for bars\n    scale_y_continuous(expand = expansion(0), # trick to remove space below 0 on y axis\n                       limits = c(0, 7),\n                       breaks = seq(0, 7, 1)) + # set limit of Y axis to 7\n  xlab(\"STUDENT CAN CHOOSE XLABEL\") + #rename the x axis label\n  ylab(\"STUDENT CAN CHOOSE YLABEL\") + #rename the y axis label\n  scale_x_discrete(labels = c('one week prior','one week after','one month after')) + #rename the groups on x axis\n    theme(panel.background = element_blank(), # removing the background panel colour\n          axis.line = element_line(color = \"black\"), # creating black axes lines\n          axis.ticks.x = element_blank(),\n          legend.position = \"none\") + # removing the legend, which is redundant\n    geom_errorbar(aes(ymin=meat-se, ymax=meat+se, width = 0.2))\n```\n\n::: {.cell-output-display}\n![](Week4_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n:::\n\n2. To practice with making an composite variable using an average score of multiple values, please return up to the text marked \"Special note\" which is just above \"2.3 Reformatting the data\" and try your hand at making a new average score variable from some existing variable. note, your data will need to be in the original wide format (i.e., the lab4_data), as opposed to long format (i.e., lab4_data_wide).\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\nlab4_data %>% \n  mutate(meat_average = (rowmeans(a1_meat, a2_meat, a3_meat))) -> lab4_data #create a new composite variable 'meat_average', which is the average amount of meat a participant consumed per week across the three time points - i.e., ((amount of meat consumed at time 1 + amount of meat consumed at time 2 + amount of meat consumed at time 3) divided by 3). Add this new composite as a variable to the pre-existing lab4_data\n\n#CHECK IT IS CORRECT AND NEW VARIABLE EXISTS\nprint(lab4_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 Ã— 5\n   participant a1_meat a2_meat a3_meat meat_average\n         <dbl>   <dbl>   <dbl>   <dbl>        <dbl>\n 1           1       6       3       6         5   \n 2           2       3       4       6         4.33\n 3           3       8       1       3         4   \n 4           4       6       5       5         5.33\n 5           5       9       0       0         3   \n 6           6       8       1       6         5   \n 7           7       9       2       2         4.33\n 8           8       5       4       7         5.33\n 9           9       7       4       1         4   \n10          10       8       6       3         5.67\n# â€¦ with 40 more rows\n```\n:::\n:::\n\n:::\n\n3. In the current lab, the normality assumption was violated for level a2 - the shame, oh the shame. Why not plot the a2 data using a histogram (see lab sheet week 2). Does the histogram make you feel more or less convinced that your decision to continue your analysis was justified?\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ANSWER CODE\n\n# Histogram for A2. We have 7 bins, because scores ranged from 0-6 [min-max] (see summary statistics of 2.3 as a reminder)\nlab4_data %>%\n    ggplot(aes(x = a2_meat)) + \n    geom_histogram(bins = 7, fill = \"grey\")\n```\n\n::: {.cell-output-display}\n![](Week4_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n:::\n\n4. Please chill, you've done incredible. See you next week and top work.\n\n![Top work!](https://images.pexels.com/photos/289998/pexels-photo-289998.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\n\n# Lab Feedback (voluntary)\n\nThis is a voluntary, super fast [survey](https://modules.lancaster.ac.uk/mod/url/view.php?id=1905317), just to gauge how you found the difficulty of the content and any additional feedback.",
    "supporting": [
      "Week4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}